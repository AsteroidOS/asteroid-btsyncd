#!/usr/bin/python

# Copyright (C) 2016 - Florent Revest <revestflo@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import dbus
import dbus.exceptions
import dbus.mainloop.glib
import dbus.service

from gi.repository import GLib

import os
import time
import array

mainloop = None

BLUEZ_SERVICE_NAME = 'org.bluez'
GATT_MANAGER_IFACE = 'org.bluez.GattManager1'
DBUS_OM_IFACE =      'org.freedesktop.DBus.ObjectManager'
DBUS_PROP_IFACE =    'org.freedesktop.DBus.Properties'

GATT_SERVICE_IFACE = 'org.bluez.GattService1'
GATT_CHRC_IFACE =    'org.bluez.GattCharacteristic1'
GATT_DESC_IFACE =    'org.bluez.GattDescriptor1'

class InvalidArgsException(dbus.exceptions.DBusException):
    _dbus_error_name = 'org.freedesktop.DBus.Error.InvalidArgs'

class NotSupportedException(dbus.exceptions.DBusException):
    _dbus_error_name = 'org.bluez.Error.NotSupported'

class NotPermittedException(dbus.exceptions.DBusException):
    _dbus_error_name = 'org.bluez.Error.NotPermitted'

class InvalidValueLengthException(dbus.exceptions.DBusException):
    _dbus_error_name = 'org.bluez.Error.InvalidValueLength'

class FailedException(dbus.exceptions.DBusException):
    _dbus_error_name = 'org.bluez.Error.Failed'


class Service(dbus.service.Object):
    PATH_BASE = '/org/bluez/example/service'

    def __init__(self, bus, index, uuid, primary):
        self.path = self.PATH_BASE + str(index)
        self.bus = bus
        self.uuid = uuid
        self.primary = primary
        self.characteristics = []
        dbus.service.Object.__init__(self, bus, self.path)

    def get_properties(self):
        return {
                GATT_SERVICE_IFACE: {
                        'UUID': self.uuid,
                        'Primary': self.primary,
                        'Characteristics': dbus.Array(
                                self.get_characteristic_paths(),
                                signature='o')
                }
        }

    def get_path(self):
        return dbus.ObjectPath(self.path)

    def add_characteristic(self, characteristic):
        self.characteristics.append(characteristic)

    def get_characteristic_paths(self):
        result = []
        for chrc in self.characteristics:
            result.append(chrc.get_path())
        return result

    def get_characteristics(self):
        return self.characteristics

    @dbus.service.method(DBUS_PROP_IFACE,
                         in_signature='s',
                         out_signature='a{sv}')
    def GetAll(self, interface):
        if interface != GATT_SERVICE_IFACE:
            raise InvalidArgsException()

        return self.get_properties[GATT_SERVICE_IFACE]

    @dbus.service.method(DBUS_OM_IFACE, out_signature='a{oa{sa{sv}}}')
    def GetManagedObjects(self):
        response = {}
        print('GetManagedObjects')

        response[self.get_path()] = self.get_properties()
        chrcs = self.get_characteristics()
        for chrc in chrcs:
            response[chrc.get_path()] = chrc.get_properties()
            descs = chrc.get_descriptors()
            for desc in descs:
                response[desc.get_path()] = desc.get_properties()

        return response


class Characteristic(dbus.service.Object):
    def __init__(self, bus, index, uuid, flags, service):
        self.path = service.path + '/char' + str(index)
        self.bus = bus
        self.uuid = uuid
        self.service = service
        self.flags = flags
        self.descriptors = []
        dbus.service.Object.__init__(self, bus, self.path)
        

    def get_properties(self):
        return {
                GATT_CHRC_IFACE: {
                        'Service': self.service.get_path(),
                        'UUID': self.uuid,
                        'Flags': self.flags,
                        'Descriptors': dbus.Array(
                                self.get_descriptor_paths(),
                                signature='o')
                }
        }

    def get_path(self):
        return dbus.ObjectPath(self.path)

    def add_descriptor(self, descriptor):
        self.descriptors.append(descriptor)

    def get_descriptor_paths(self):
        result = []
        for desc in self.descriptors:
            result.append(desc.get_path())
        return result

    def get_descriptors(self):
        return self.descriptors

    @dbus.service.method(DBUS_PROP_IFACE,
                         in_signature='s',
                         out_signature='a{sv}')
    def GetAll(self, interface):
        if interface != GATT_CHRC_IFACE:
            raise InvalidArgsException()

        return self.get_properties[GATT_CHRC_IFACE]

    @dbus.service.method(GATT_CHRC_IFACE, out_signature='ay')
    def ReadValue(self):
        print('Default ReadValue called, returning error')
        raise NotSupportedException()

    @dbus.service.method(GATT_CHRC_IFACE, in_signature='ay')
    def WriteValue(self, value):
        print('Default WriteValue called, returning error')
        raise NotSupportedException()

    @dbus.service.method(GATT_CHRC_IFACE)
    def StartNotify(self):
        print('Default StartNotify called, returning error')
        raise NotSupportedException()

    @dbus.service.method(GATT_CHRC_IFACE)
    def StopNotify(self):
        print('Default StopNotify called, returning error')
        raise NotSupportedException()

    @dbus.service.signal(DBUS_PROP_IFACE,
                         signature='sa{sv}as')
    def PropertiesChanged(self, interface, changed, invalidated):
        pass


class Descriptor(dbus.service.Object):
    def __init__(self, bus, index, uuid, flags, characteristic):
        self.path = characteristic.path + '/desc' + str(index)
        self.bus = bus
        self.uuid = uuid
        self.flags = flags
        self.chrc = characteristic
        dbus.service.Object.__init__(self, bus, self.path)

    def get_properties(self):
        return {
                GATT_DESC_IFACE: {
                        'Characteristic': self.chrc.get_path(),
                        'UUID': self.uuid,
                        'Flags': self.flags,
                }
        }

    def get_path(self):
        return dbus.ObjectPath(self.path)

    @dbus.service.method(DBUS_PROP_IFACE,
                         in_signature='s',
                         out_signature='a{sv}')
    def GetAll(self, interface):
        if interface != GATT_DESC_IFACE:
            raise InvalidArgsException()

        return self.get_properties[GATT_CHRC_IFACE]

    @dbus.service.method(GATT_DESC_IFACE, out_signature='ay')
    def ReadValue(self):
        print ('Default ReadValue called, returning error')
        raise NotSupportedException()

    @dbus.service.method(GATT_DESC_IFACE, in_signature='ay')
    def WriteValue(self, value):
        print('Default WriteValue called, returning error')
        raise NotSupportedException()


class NotificationsService(Service):
    """
    This GATT Service receives notifications from central devices (laptop,
    phone...) This service is also responsible for notifying seen notifs.
    """
    HR_UUID = '00009071-0000-0000-0000-00A57E401D05'

    def __init__(self, bus, index):
        Service.__init__(self, bus, index, self.HR_UUID, True)
        self.add_characteristic(NotificationsUpdateChrc(bus, 0, self))
        self.add_characteristic(NotificationsFeedbackChrc(bus, 1, self))

class NotificationsUpdateChrc(Characteristic):
    NOTI_UPD_UUID = '00009001-0000-0000-0000-00A57E401D05'

    def __init__(self, bus, index, service):
        Characteristic.__init__(
                self, bus, index,
                self.NOTI_UPD_UUID,
                ['write'],
                service)

    def WriteValue(self, value):
        string = ''.join([unichr(byte) for byte in value])
        print('Notification received: ' + repr(string))

        item = ('org.freedesktop.Notifications')
        path = ('/org/freedesktop/Notifications')
        interface = ('org.freedesktop.Notifications')

        icon = ''
        array = ''
        hint = {'x-nemo-preview-body': string, 'x-nemo-preview-summary': 'Phone', 'urgency': 3}
        time = 3000
        app_name = ('asteroid-btsyncd')
        title = ('Phone')
        body = (string)

        bus = dbus.SessionBus()
        notif = bus.get_object(item, path)
        notify = dbus.Interface(notif, interface)
        notify.Notify(app_name, 0, icon, title, body, array, hint, time)

class NotificationsFeedbackChrc(Characteristic):
    NOTI_FDB_UUID = '00009002-0000-0000-0000-00A57E401D05'

    def __init__(self, bus, index, service):
        Characteristic.__init__(
                self, bus, index,
                self.NOTI_FDB_UUID,
                ['notify'],
                service)


# TODO: Use Gio.GSettings (when available) instead of os.system("gsettings ...
class WeatherService(Service):
    """
    This GATT Service receives notifications from central devices (laptop,
    phone...) This service is also responsible for notifying seen notifs.
    """
    NOTIF_UUID = '00008071-0000-0000-0000-00A57E401D05'

    def __init__(self, bus, index):
        Service.__init__(self, bus, index, self.NOTIF_UUID, True)
        self.add_characteristic(WeatherCityChrc(bus, 0, self))

        self.add_characteristic(WeatherIdsChrc(bus, 1, self))
        self.add_characteristic(WeatherMaxTempsChrc(bus, 2, self))
        self.add_characteristic(WeatherMinTempsChrc(bus, 3, self))

class WeatherCityChrc(Characteristic):
    WEAT_CITY_UUID = '00008001-0000-0000-0000-00A57E401D05'

    def __init__(self, bus, index, service):
        Characteristic.__init__(
                self, bus, index,
                self.WEAT_CITY_UUID,
                ['write'],
                service)

    def WriteValue(self, value):
        string = ''.join([unichr(byte) for byte in value])
        os.system("gsettings set org.asteroidos.weather city-name '" + string + "'") 

class WeatherIdsChrc(Characteristic):
    WEAT_IDS_UUID = '00008002-0000-0000-0000-00A57E401D05'

    def __init__(self, bus, index, service):
        Characteristic.__init__(
                self, bus, index,
                self.WEAT_IDS_UUID,
                ['write'],
                service)

    def WriteValue(self, value):
        for i in range(5):
            os.system("gsettings set org.asteroidos.weather.day" + str(i) +" id " + str(value[2*i]*256 +value[2*i+1]))

class WeatherMinTempsChrc(Characteristic):
    WEAT_MINT_UUID = '00008003-0000-0000-0000-00A57E401D05'

    def __init__(self, bus, index, service):
        Characteristic.__init__(
                self, bus, index,
                self.WEAT_MINT_UUID,
                ['write'],
                service)

    def WriteValue(self, value):
        for i in range(5):
            os.system("gsettings set org.asteroidos.weather.day" + str(i) +" min-temp " + str(value[2*i]*256 +value[2*i+1]))

class WeatherMaxTempsChrc(Characteristic):
    WEAT_MAXT_UUID = '00008004-0000-0000-0000-00A57E401D05'

    def __init__(self, bus, index, service):
        Characteristic.__init__(
                self, bus, index,
                self.WEAT_MAXT_UUID,
                ['write'],
                service)

    def WriteValue(self, value):
        for i in range(5):
            os.system("gsettings set org.asteroidos.weather.day" + str(i) +" max-temp " + str(value[2*i]*256 +value[2*i+1]))

def register_service_cb():
    print('GATT service registered')

def register_service_error_cb(error):
    print('Failed to register service: ' + str(error))
    mainloop.quit()

def find_adapter(bus):
    remote_om = dbus.Interface(bus.get_object(BLUEZ_SERVICE_NAME, '/'),
                               DBUS_OM_IFACE)
    objects = remote_om.GetManagedObjects()

    for o, props in objects.iteritems():
        if props.has_key(GATT_MANAGER_IFACE):
            return o

    return None

def main():
    global mainloop
    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

    bus = dbus.SystemBus()

    adapter = find_adapter(bus)
    if not adapter:
        print('GattManager1 interface not found')
        return

    service_manager = dbus.Interface(
            bus.get_object(BLUEZ_SERVICE_NAME, adapter),
            GATT_MANAGER_IFACE)

    notif_service = NotificationsService(bus, 0)
    service_manager.RegisterService(notif_service.get_path(), {},
                                    reply_handler=register_service_cb,
                                    error_handler=register_service_error_cb)

    weather_service = WeatherService(bus, 1)
    service_manager.RegisterService(weather_service.get_path(), {},
                                    reply_handler=register_service_cb,
                                    error_handler=register_service_error_cb)

    mainloop = GLib.MainLoop()
    mainloop.run()

if __name__ == '__main__':
    main()
